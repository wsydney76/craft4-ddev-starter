{# Render image tag #}
{% macro img(image, params = []) %}

    {# @param image Asset required #}
    {# @param params Object default=[] #}

    {#
    params keys:
        - transform: Transform object, optional=customConfig
        - srcset: Array of sizes, optional=customConfig
        - handleCopyright: string, show = show copyright notice on image, register = register for later output, none = noaction
        - attr: Object for image attributes, e.g.
            - class
            - loading
    #}

    {% set transform = params.transform ?? customConfig.defaultTransform %}
    {% set srcset = params.srcset ?? customConfig.defaultSrcSet %}
    {% set attr = params.attr ?? {loading: 'lazy'} %}

    {% set handleCopyright = params.handleCopyright ?? customConfig.handleCopyright ?? 'register' %}

    {% if params.showCopyright is defined and params.showCopyright %}
        {# backward compatibility #}
        {% set handleCopyright = 'show' %}
    {% endif %}


    {% if transform.format is not defined %}
        {% set transform = transform|merge({format: customConfig.defaultImageFormat}) %}
    {% endif %}


    {% if craft.app.plugins.pluginEnabled('imager-x') %}

        {% set imager = craft.imager %}

        {# We need to manually calculate transforms for image / srcSets #}

        {% if transform.width is defined and transform.height is defined %}
            {# noop #}
        {% elseif transform.width is defined %}
            {% set ratio = image.width / image.height %}
            {% set transform = transform|merge({height: (transform.width / ratio)|round(0) }) %}
        {% elseif transform.height is defined %}
            {% set ratio = image.width / image.height %}
            {% set transform = transform|merge({width: (transform.height * ratio)|round(0) }) %}
        {% else %}
            {% set transform = transform|merge({width: image.width, height: image.height }) %}
        {% endif %}

        {% set baseTransform = {
            width: transform.width,
            height: transform.height,
            format: transform.format ?? customConfig.defaultImageFormat,
            mode: transform.mode ?? 'crop',
            effects: {sharpen: true}
        } %}

        {% set ratio = transform.width / transform.height %}


        {% set transforms = [baseTransform] %}
        {% for responsiveWidth in srcset %}
            {% if responsiveWidth is array %}
                {% set transforms = transforms|push(responsiveWidth) %}
            {% else %}
                {% if responsiveWidth < transform.width %}
                    {% set transforms = transforms|push(baseTransform|merge({width: responsiveWidth, height: (responsiveWidth / ratio)|round(0)})) %}
                {% endif %}
            {% endif %}
        {% endfor %}

        {% set transformedImages = imager.transformImage(image, transforms) %}

        {% set imgHtml =  tag('img', {
            src: imager.placeholder({ width: transform.height, height: transform.width, color: '#cccccc' }),
            height: transform.height,
            width: transform.width,
            alt: image.altText ?: image.title,
            srcset: imager.srcset(transformedImages),
            loading: 'lazy'
        })|attr(attr) %}


    {% else %}

        {# Craft native transforms, no need to manually calculate anything #}
        {% set attr = attr | merge({alt: image.altText ?: image.title}) %}


        {% if devMode and customConfig.skipSrcset %}
            {% set imgHtml = image.img(transform)|attr(attr) %}
        {% else %}
            {% set srcset = srcset|map(src => src is array ? src.width : src) %}
            {% set imgHtml = image.img(transform, srcset)|attr(attr) %}
        {% endif %}
    {% endif %}


    {% switch handleCopyright %}

    {% case "show" %}
        {{ imgHtml|raw }}
        {{ _self.imgCopyright(image) }}

    {% case "overlay" %}

        <div class="relative">
            {{ imgHtml|raw }}
            {{ _self.imgCopyright(image, 'overlay') }}
        </div>

    {% case "register" %}
        {{ imgHtml|raw }}
        {% do _globals.addToCollection('imagesForCopyrightNotice', image) %}
    {% default %}
        {{ imgHtml|raw }}
    {% endswitch %}


{% endmacro %}

{% macro imgCopyright(image, style="default") %}
    {% if image.copyright %}

        {% switch style %}

        {% case "overlay" %}

            <div class="absolute bottom-0 right-0 px-2 py-1 bg-black/50 text-white text-xs rounded-br-lg">
                {{ 'Photo'|t }}: {{ image.copyright }}
            </div>

        {% default %}

            <div class="py-2 text-xs text-right pe-1">
                {{ 'Photo'|t }}: {{ image.copyright }}
            </div>

        {% endswitch %}


    {% endif %}
{% endmacro %}


{% macro navLink(text, url, active=false) %}
    <a href="{{ url }}" class="{{ _self.navLinkClasses(active) }}">
        {{ text }}
    </a>
{% endmacro %}

{% macro navLinkClasses(active=false) -%}
    {{ active ? 'border-header-foreground dark:border-header-foreground-dark' : 'border-transparent ' }} border-b-2 text-base font-medium hover:border-header-foreground dark:hover:border-header-foreground-dark
{%- endmacro %}


{# Button for 'see more' #}
{% macro pageButton(type, caption) %}
    {% set navEntry = craft.entries.section('page').type(type).one %}
    {% if navEntry %}
        <div class="mt-8">
            {% include '_layouts/partials/button.twig' with {
                caption: caption|t,
                href: navEntry.url
            } only %}
        </div>
    {% endif %}
{% endmacro %}

{# Icons #}
{% macro icon(icon) %}
    {{ svg("@templates/_icons/#{icon}.svg") }}
{% endmacro %}

{% macro linkWithIcon(entry, icon, align='left') %}
    {% if entry %}
        {% if align == 'left' %}
            <div class="flex space-x-2 rtl:space-x-reverse items-center">
                {{ svg("@templates/_icons/#{icon}.svg") }}&nbsp;{{ entry.link }}
            </div>
        {% else %}
            <div class="text-right flex space-x-2 rtl:space-x-reverse items-center">
                {{ entry.link }}&nbsp;{{ svg("@templates/_icons/#{icon}.svg") }}
            </div>
        {% endif %}
    {% endif %}
{% endmacro %}

